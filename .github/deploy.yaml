# name: Docker Image CI

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# # env:
# #   TF_VAR_ionos_token: ${{ secrets.IONOS_TOKEN }}
# #   AWS_ACCESS_KEY_ID: ${{ secrets.OVH_BUCKET_ACCESS_KEY }}
# #   AWS_SECRET_ACCESS_KEY: ${{ secrets.OVH_BUCKET_SECRET_KEY }}
# #   TF_VAR_ionos_s3_access_key: ${{ secrets.IONOS_BUCKET_ACCESS_KEY }}
# #   TF_VAR_ionos_s3_secret_key: ${{ secrets.IONOS_BUCKET_SECRET_KEY }}

# jobs:
# #   terraform-plan:
# #     runs-on: ubuntu-latest

# #     steps:
# #       - name: Checkout repository
# #         uses: actions/checkout@v4

# #       - name: Set up Terraform
# #         uses: hashicorp/setup-terraform@v3
# #         with:
# #           terraform_version: 1.6.6

# #       - name: Terraform Init apply
# #         run: |
# #           terraform init
# #         working-directory: deploy/terraform

# #       - name: Terraform Format Check
# #         run: terraform fmt -check
# #         working-directory: deploy/terraform

# #       - name: Terraform Validate
# #         run: terraform validate
# #         working-directory: deploy/terraform

# #       - name: Terraform Plan
# #         run: terraform plan
# #         working-directory: deploy/terraform

# #   terraform-apply:
# #     runs-on: ubuntu-latest
# #     environment: terraform_holder
# #     needs: terraform-plan
# #     steps:
# #       - uses: actions/checkout@v4

# #       - uses: hashicorp/setup-terraform@v3
# #         with:
# #           terraform_version: 1.6.6

# #       - name: Terraform Init apply
# #         run: |
# #           terraform init
# #         working-directory: deploy/terraform

# #       - run: terraform apply -auto-approve
# #         working-directory: deploy/terraform

#   build:
#     # needs: terraform-apply
#     runs-on: ubuntu-latest

#     env:
#       DOCKER_BUILDKIT: 1

#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Login to Ionos registry
#         run: docker login lucas-rex.cr.de-fra.ionos.com -u lucas-git-token -p ${{ secrets.IONOS_REGISTRY_KEY }}

#       - name: Cache Docker layers
#         uses: actions/cache@v4
#         with:
#           path: /tmp/.buildx-cache
#           key: ${{ runner.os }}-buildx-${{ github.sha }}
#           restore-keys: |
#             ${{ runner.os }}-buildx-

#       - name: Build and push app image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./app
#           file: ./app/Dockerfile
#           push: true
#           tags: |
#             lucas-rex.cr.de-fra.ionos.com/miranui/miranui-poc-app:latest
#           cache-from: type=local,src=/tmp/.buildx-cache
#           cache-to: type=local,dest=/tmp/.buildx-cache

#       - name: Build and push frontend image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./frontend
#           file: ./frontend/Dockerfile
#           push: true
#           tags: |
#             lucas-rex.cr.de-fra.ionos.com/miranui/miranui-poc-frontend:latest
#           cache-from: type=local,src=/tmp/.buildx-cache
#           cache-to: type=local,dest=/tmp/.buildx-cache

# #   deploy:
# #     needs: build
# #     environment: production  # 🔐 Ce job attendra une validation manuelle via GitHub UI
# #     runs-on: ubuntu-latest

# #     steps:
# #       - name: Setup SSH
# #         uses: webfactory/ssh-agent@v0.7.0
# #         with:
# #           ssh-private-key: ${{ secrets.IONOS_SSH_PRIVATE_KEY }}

# #       - uses: actions/checkout@v4

# #       - name: Create .env file from secrets
# #         run: |
# #           echo "S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}" > .env
# #           echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> .env
# #           echo "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" >> .env
# #           echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> .env
# #           echo "AWS_REQUEST_CHECKSUM_CALCULATION=when_required" >> .env
# #           echo "AWS_RESPONSE_CHECKSUM_VALIDATION=when_required" >> .env
# #           echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
# #           echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
# #           echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
# #           echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
# #           echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env

# #       - name: Copy files to Ionos VM
# #         run: |
# #           rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./ \
# #           ${{ secrets.IONOS_USER }}@${{ secrets.IONOS_HOST }}:/home/${{ secrets.IONOS_USER }}/app

# #       - name: Remote deploy commands
# #         run: |
# #           ssh -o StrictHostKeyChecking=no ${{ secrets.IONOS_USER }}@${{ secrets.IONOS_HOST }} << 'EOF'
# #             cd ~/app/deploy
# #             bash setup.sh "${{ secrets.IONOS_REGISTRY_KEY }}"
# #           EOF
